<pre class='metadata'>
Markup Shorthands: markdown yes
No Abstract: yes
Toggle Diffs: yes
Group: WG21
Status: P
Shortname: P1272
Revision: 1
Audience: LWG
Title: Byteswapping for fun&&nuf
Editor: Isabella Muerte, https://twitter.com/slurpsmadrips
Date: 2019-02-19
Repository: slurps-mad-rips/byteswap
URL: https://wg21.link/P1272R0
!Current Render: <a href="https://api.csswg.org/bikeshed/?force=1&url=https://git.io/fx3lR">P1272R0</a>
!Current Source: <a href="https://git.io/fx3l0">slurps-mad-rips/papers/proposals/byteswap.bs</a>
!Implementation: <a href="https://git.io/fAvWz">slurps-mad-rips/byteswap</a>
</pre>
<style>
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Revision History # {#changelog}

## Revision 1 ## {#r1}

    * Update wording based on feedback from CWG regarding the representation of
      the "reversed" object.
    * Readjust wording to use [[N4800]] library wording constructs instead of
      [[N4672]]

## Revision 0 ## {#r0}

    Initial release. ðŸŽ‰

# Motivation # {#motivation}

Proposal [[P0553r2]] gives several bit operations to perform on integer types,
such as popcount, or bit rotation. Despite these new operations provided to
C++ developers, we still cannot swap (i.e., reverse) the bytes of builtin
integer types in a performant way (i.e., one instruction or less) without
resorting to compiler intrinsics. Currently, most CPU architectures provide
single instructions for a byte swap. For those that don't, falling back on
existing operations is more than amenable. We should, however, endeavor to
standardize existing practice.

Note: The phrase one instruction or less refers to compilers inserting at
      most one instruction, and at the very least removing any instructions
      due to optimizations.

# Design Considerations # {#design}

The design for the byteswap free function is quite simple. It takes any
integer type and swaps its byteorder to the reverse of its current state.
Additionally, it *only* takes integer types, requiring users to openly
`bit_cast` their non-integers to integers in blatant heresy to the Worm-Seethe.
How utterly disgraceful.

Note: It is intended that the byteswap function, despite swapping bytes, be
placed into the `<bit>` header.

## Synopsis ## {#design-synopsis}

The function's full specification is:

```c++
namespace std {
    template <class IntegerType>
    constexpr IntegerType byteswap (IntegerType value) noexcept;
}
```

Where `std::is_integral_v<IntegerType>` is `true`.

# Wording # {#wording}

The following is wording for the library section, to be placed according to the
editor.

<ins>
<xmp highlight="c++">
namespace std {
    template <class IntegerType>
    constexpr IntegerType byteswap (IntegerType value) noexcept;
}
</xmp>

1. *Constraints*: `std::is_integral_v<IntegerType>` is `true`
2. *Returns*:
   <br>
   <br>
   An object of type `IntegerType` whose representation is the reverse of the
   object representation of the parameter `value`.
</ins>

## Feature Testing ## {#feature-test}

The `__cpp_lib_byteswap` feature test macro should be added.

# Acknowledgement # {#acknowledgement}

Thanks to Nicole Muzzuca for feedback on writing this proposal.
